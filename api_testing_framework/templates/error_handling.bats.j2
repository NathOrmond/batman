#!/usr/bin/env bats

# Generated error handling tests for {{ api.name }} - {{ tag | title }} endpoints
# Generated by BATMAN API Testing Framework v1.0.0

load helpers

@test "API Health Check" {
    setup_test "API Health Check"
    
    response=$(make_request "GET" "/health")
    
    check_status_code "$response" "200"
    
    teardown_test
}

{% for endpoint in endpoints %}
{% set path_params = endpoint.path | extract_path_params %}

@test "{{ endpoint.method }} {{ endpoint.path }} - Invalid Path Parameter" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with invalid path parameter"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="invalid_{{ param }}_with_special_chars!@#$%"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}/invalid_path"
    {% endif %}
    
    {% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}
    local test_data='{"test": "data"}'
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$test_data")
    {% else %}
    response=$(make_request "{{ endpoint.method }}" "$endpoint")
    {% endif %}
    
    # Should return 400 or 404
    local status=$(extract_status_code "$response")
    if [ "$status" = "400" ] || [ "$status" = "404" ]; then
        echo -e "${GREEN}✓ Got expected error status: $status${NC}"
    else
        echo -e "${RED}✗ Expected 400 or 404, got $status${NC}"
        return 1
    fi
    
    teardown_test
}

{% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}

@test "{{ endpoint.method }} {{ endpoint.path }} - Malformed JSON" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with malformed JSON"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send malformed JSON
    local malformed_json='{"invalid": json, "missing": quote}'
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$malformed_json")
    
    check_status_code "$response" "400"
    
    teardown_test
}

@test "{{ endpoint.method }} {{ endpoint.path }} - Wrong Content Type" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with wrong content type"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send data with wrong content type
    local test_data='{"test": "data"}'
    local headers="Content-Type: text/plain"
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$test_data" "$headers")
    
    # Should return 400 or 415
    local status=$(extract_status_code "$response")
    if [ "$status" = "400" ] || [ "$status" = "415" ]; then
        echo -e "${GREEN}✓ Got expected error status: $status${NC}"
    else
        echo -e "${RED}✗ Expected 400 or 415, got $status${NC}"
        return 1
    fi
    
    teardown_test
}

@test "{{ endpoint.method }} {{ endpoint.path }} - Empty Request Body" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with empty request body"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send empty request body
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "")
    
    # Should return 400
    check_status_code "$response" "400"
    
    teardown_test
}

@test "{{ endpoint.method }} {{ endpoint.path }} - Oversized Request Body" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with oversized request body"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Generate oversized data (1MB+)
    local oversized_data='{"data": "'$(printf 'A%.0s' {1..1000000})'"}'
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$oversized_data")
    
    # Should return 413 or 400
    local status=$(extract_status_code "$response")
    if [ "$status" = "413" ] || [ "$status" = "400" ]; then
        echo -e "${GREEN}✓ Got expected error status: $status${NC}"
    else
        echo -e "${RED}✗ Expected 413 or 400, got $status${NC}"
        return 1
    fi
    
    teardown_test
}

{% endif %}

@test "{{ endpoint.method }} {{ endpoint.path }} - Unauthorized Access" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} without authentication"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Temporarily clear authentication
    local original_token="$AUTH_TOKEN"
    AUTH_TOKEN=""
    
    {% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}
    local test_data='{"test": "data"}'
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$test_data")
    {% else %}
    response=$(make_request "{{ endpoint.method }}" "$endpoint")
    {% endif %}
    
    # Restore authentication
    AUTH_TOKEN="$original_token"
    
    # Should return 401 or 403
    local status=$(extract_status_code "$response")
    if [ "$status" = "401" ] || [ "$status" = "403" ]; then
        echo -e "${GREEN}✓ Got expected error status: $status${NC}"
    else
        echo -e "${RED}✗ Expected 401 or 403, got $status${NC}"
        return 1
    fi
    
    teardown_test
}

@test "{{ endpoint.method }} {{ endpoint.path }} - Rate Limiting" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} rate limiting test"
    
    {% if path_params | length > 0 %}
    {% for param in path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Make multiple rapid requests
    local rate_limited=false
    for i in {1..10}; do
        {% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}
        local test_data='{"test": "data"}'
        response=$(make_request "{{ endpoint.method }}" "$endpoint" "$test_data")
        {% else %}
        response=$(make_request "{{ endpoint.method }}" "$endpoint")
        {% endif %}
        
        local status=$(extract_status_code "$response")
        if [ "$status" = "429" ]; then
            rate_limited=true
            break
        fi
        
        sleep 0.1
    done
    
    if [ "$rate_limited" = "true" ]; then
        echo -e "${GREEN}✓ Rate limiting detected${NC}"
    else
        echo -e "${YELLOW}⚠ Rate limiting not detected (may not be implemented)${NC}"
    fi
    
    teardown_test
}

{% endfor %}

@test "Test Summary" {
    print_test_summary
}

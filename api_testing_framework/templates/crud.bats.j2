#!/usr/bin/env bats

# Generated CRUD tests for {{ api.name }} - {{ tag | title }} endpoints
# Generated by BATMAN API Testing Framework v1.0.0

load helpers

# Global variables for CRUD operations
CREATED_ID=""
CREATED_DATA=""

@test "API Health Check" {
    setup_test "API Health Check"
    
    response=$(make_request "GET" "/health")
    
    check_status_code "$response" "200"
    
    teardown_test
}

{% for endpoint in endpoints %}
{% if endpoint.method == 'POST' and endpoint.path | extract_path_params | length == 0 %}
{% set create_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') | replace('s', '') %}
{% set schema_ref = endpoint.request_body.content['application/json'].schema['$ref'] | replace('#/components/schemas/', '') %}

@test "CREATE {{ endpoint.path }} - Create {{ resource_name | title }}" {
    setup_test "CREATE {{ endpoint.path }}"
    
    local endpoint="{{ endpoint.path }}"
    local test_data=$(generate_test_data "{{ schema_ref | default('Default') }}")
    
    response=$(make_request "POST" "$endpoint" "$test_data")
    
    check_status_code "$response" "201"
    
    # Extract created ID for later tests
    CREATED_ID=$(extract_json_field "$response" "id")
    CREATED_DATA=$(extract_response_body "$response")
    
    echo "Created {{ resource_name }} with ID: $CREATED_ID"
    
    teardown_test
}

{% elif endpoint.method == 'GET' and endpoint.path | extract_path_params | length == 1 %}
{% set read_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') | replace('s', '') %}

@test "READ {{ endpoint.path }} - Get {{ resource_name | title }} by ID" {
    setup_test "READ {{ endpoint.path }}"
    
    {% if create_endpoint %}
    # Use the ID from the create test
    local {{ endpoint.path | extract_path_params | first }}="$CREATED_ID"
    {% else %}
    local {{ endpoint.path | extract_path_params | first }}="test_id"
    {% endif %}
    
    local endpoint="{{ endpoint.path }}"
    endpoint=$(echo "$endpoint" | sed "s/{ {{ endpoint.path | extract_path_params | first }}}/${{ endpoint.path | extract_path_params | first }}/g")
    
    response=$(make_request "GET" "$endpoint")
    
    check_status_code "$response" "200"
    
    {% if endpoint.responses['200'].content and endpoint.responses['200'].content['application/json'] and endpoint.responses['200'].content['application/json'].schema %}
    {% set schema_ref = endpoint.responses['200'].content['application/json'].schema['$ref'] %}
    {% if schema_ref %}
    validate_json_schema "$response" "{{ schema_ref | replace('#/components/schemas/', '') }}"
    {% endif %}
    {% endif %}
    
    teardown_test
}

{% elif endpoint.method == 'PUT' and endpoint.path | extract_path_params | length == 1 %}
{% set update_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') | replace('s', '') %}

@test "UPDATE {{ endpoint.path }} - Update {{ resource_name | title }}" {
    setup_test "UPDATE {{ endpoint.path }}"
    
    {% if create_endpoint %}
    # Use the ID from the create test
    local {{ endpoint.path | extract_path_params | first }}="$CREATED_ID"
    {% else %}
    local {{ endpoint.path | extract_path_params | first }}="test_id"
    {% endif %}
    
    local endpoint="{{ endpoint.path }}"
    endpoint=$(echo "$endpoint" | sed "s/{ {{ endpoint.path | extract_path_params | first }}}/${{ endpoint.path | extract_path_params | first }}/g")
    
    {% if endpoint.request_body %}
    {% set schema_ref = endpoint.request_body.content['application/json'].schema['$ref'] | replace('#/components/schemas/', '') %}
    local test_data=$(generate_test_data "{{ schema_ref | default('Default') }}")
    {% else %}
    local test_data='{"name": "Updated Test Item"}'
    {% endif %}
    
    response=$(make_request "PUT" "$endpoint" "$test_data")
    
    check_status_code "$response" "200"
    
    {% if endpoint.responses['200'].content and endpoint.responses['200'].content['application/json'] and endpoint.responses['200'].content['application/json'].schema %}
    {% set schema_ref = endpoint.responses['200'].content['application/json'].schema['$ref'] %}
    {% if schema_ref %}
    validate_json_schema "$response" "{{ schema_ref | replace('#/components/schemas/', '') }}"
    {% endif %}
    {% endif %}
    
    teardown_test
}

{% elif endpoint.method == 'PATCH' and endpoint.path | extract_path_params | length == 1 %}
{% set patch_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') | replace('s', '') %}

@test "PATCH {{ endpoint.path }} - Partial Update {{ resource_name | title }}" {
    setup_test "PATCH {{ endpoint.path }}"
    
    {% if create_endpoint %}
    # Use the ID from the create test
    local {{ endpoint.path | extract_path_params | first }}="$CREATED_ID"
    {% else %}
    local {{ endpoint.path | extract_path_params | first }}="test_id"
    {% endif %}
    
    local endpoint="{{ endpoint.path }}"
    endpoint=$(echo "$endpoint" | sed "s/{ {{ endpoint.path | extract_path_params | first }}}/${{ endpoint.path | extract_path_params | first }}/g")
    
    # Send partial update data
    local patch_data='{"name": "Patched Test Item"}'
    
    response=$(make_request "PATCH" "$endpoint" "$patch_data")
    
    check_status_code "$response" "200"
    
    {% if endpoint.responses['200'].content and endpoint.responses['200'].content['application/json'] and endpoint.responses['200'].content['application/json'].schema %}
    {% set schema_ref = endpoint.responses['200'].content['application/json'].schema['$ref'] %}
    {% if schema_ref %}
    validate_json_schema "$response" "{{ schema_ref | replace('#/components/schemas/', '') }}"
    {% endif %}
    {% endif %}
    
    teardown_test
}

{% elif endpoint.method == 'DELETE' and endpoint.path | extract_path_params | length == 1 %}
{% set delete_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') | replace('s', '') %}

@test "DELETE {{ endpoint.path }} - Delete {{ resource_name | title }}" {
    setup_test "DELETE {{ endpoint.path }}"
    
    {% if create_endpoint %}
    # Use the ID from the create test
    local {{ endpoint.path | extract_path_params | first }}="$CREATED_ID"
    {% else %}
    local {{ endpoint.path | extract_path_params | first }}="test_id"
    {% endif %}
    
    local endpoint="{{ endpoint.path }}"
    endpoint=$(echo "$endpoint" | sed "s/{ {{ endpoint.path | extract_path_params | first }}}/${{ endpoint.path | extract_path_params | first }}/g")
    
    response=$(make_request "DELETE" "$endpoint")
    
    check_status_code "$response" "204"
    
    teardown_test
}

{% elif endpoint.method == 'GET' and endpoint.path | extract_path_params | length == 0 %}
{% set list_endpoint = endpoint %}
{% set resource_name = endpoint.path | replace('/', '') %}

@test "LIST {{ endpoint.path }} - List {{ resource_name | title }}" {
    setup_test "LIST {{ endpoint.path }}"
    
    local endpoint="{{ endpoint.path }}"
    
    response=$(make_request "GET" "$endpoint")
    
    check_status_code "$response" "200"
    
    {% if endpoint.responses['200'].content and endpoint.responses['200'].content['application/json'] and endpoint.responses['200'].content['application/json'].schema %}
    {% set schema_ref = endpoint.responses['200'].content['application/json'].schema['$ref'] %}
    {% if schema_ref %}
    validate_json_schema "$response" "{{ schema_ref | replace('#/components/schemas/', '') }}"
    {% endif %}
    {% endif %}
    
    # Verify it's an array
    local body=$(extract_response_body "$response")
    local is_array=$(echo "$body" | jq 'type == "array"' 2>/dev/null)
    if [ "$is_array" = "true" ]; then
        echo -e "${GREEN}✓ Response is an array${NC}"
    else
        echo -e "${RED}✗ Response is not an array${NC}"
        return 1
    fi
    
    teardown_test
}

{% endif %}
{% endfor %}

# Error handling tests
{% for endpoint in endpoints %}
{% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}

@test "{{ endpoint.method }} {{ endpoint.path }} - Invalid JSON" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with invalid JSON"
    
    {% if endpoint.path | extract_path_params | length > 0 %}
    {% for param in endpoint.path | extract_path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in endpoint.path | extract_path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send malformed JSON
    local invalid_json='{"invalid": json}'
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$invalid_json")
    
    check_status_code "$response" "400"
    
    teardown_test
}

@test "{{ endpoint.method }} {{ endpoint.path }} - Missing Required Fields" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with missing required fields"
    
    {% if endpoint.path | extract_path_params | length > 0 %}
    {% for param in endpoint.path | extract_path_params %}
    local {{ param }}="test_{{ param }}"
    {% endfor %}
    
    local endpoint="{{ endpoint.path }}"
    {% for param in endpoint.path | extract_path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send empty object
    local empty_data='{}'
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$empty_data")
    
    check_status_code "$response" "400"
    
    teardown_test
}

{% endif %}
{% endfor %}

@test "Test Summary" {
    print_test_summary
}

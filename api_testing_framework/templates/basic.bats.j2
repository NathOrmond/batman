#!/usr/bin/env bats

# Generated test for {{ api.name }} - {{ tag | title }} endpoints
# Generated by BATMAN API Testing Framework v1.0.0

load helpers

@test "API Health Check" {
    setup_test "API Health Check"
    
    response=$(make_request "GET" "/health")
    
    check_status_code "$response" "200"
    
    teardown_test
}

{% for endpoint in endpoints %}
{% set test_name = endpoint.operation_id | default(endpoint.method + "_" + endpoint.path | replace("/", "_") | replace("{", "") | replace("}", "")) %}
{% set path_params = endpoint.path | extract_path_params %}
{% set has_params = path_params | length > 0 %}

@test "{{ endpoint.method }} {{ endpoint.path }} - {{ endpoint.summary | default('Basic test') }}" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }}"
    
    {% if has_params %}
    # Set up path parameters
    {% for param in path_params %}
    local {{ param }}="{{ param }}_test_value"
    {% endfor %}
    
    # Replace path parameters
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    {% if endpoint.request_body %}
    # Generate test data for request body
    local test_data=$(generate_test_data "{{ endpoint.request_body.content['application/json'].schema['$ref'] | replace('#/components/schemas/', '') | default('Default') }}")
    {% endif %}
    
    {% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$test_data")
    {% else %}
    response=$(make_request "{{ endpoint.method }}" "$endpoint")
    {% endif %}
    
    {% for status_code, response_def in endpoint.responses.items() %}
    {% if status_code.startswith('2') %}
    # Test success response
    check_status_code "$response" "{{ status_code }}"
    
    {% if response_def.content and response_def.content['application/json'] and response_def.content['application/json'].schema %}
    {% set schema_ref = response_def.content['application/json'].schema['$ref'] %}
    {% if schema_ref %}
    validate_json_schema "$response" "{{ schema_ref | replace('#/components/schemas/', '') }}"
    {% endif %}
    {% endif %}
    break
    {% endif %}
    {% endfor %}
    
    teardown_test
}

{% if endpoint.method in ['POST', 'PUT', 'PATCH'] %}
@test "{{ endpoint.method }} {{ endpoint.path }} - Invalid Data" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} with invalid data"
    
    {% if has_params %}
    # Set up path parameters
    {% for param in path_params %}
    local {{ param }}="{{ param }}_test_value"
    {% endfor %}
    
    # Replace path parameters
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    local endpoint="{{ endpoint.path }}"
    {% endif %}
    
    # Send invalid JSON data
    local invalid_data='{"invalid": "data"}'
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint" "$invalid_data")
    
    # Should return 400 Bad Request
    check_status_code "$response" "400"
    
    teardown_test
}
{% endif %}

{% if endpoint.method in ['GET', 'PUT', 'PATCH', 'DELETE'] %}
@test "{{ endpoint.method }} {{ endpoint.path }} - Not Found" {
    setup_test "{{ endpoint.method }} {{ endpoint.path }} not found"
    
    {% if has_params %}
    # Use non-existent parameter values
    {% for param in path_params %}
    local {{ param }}="non_existent_{{ param }}"
    {% endfor %}
    
    # Replace path parameters
    local endpoint="{{ endpoint.path }}"
    {% for param in path_params %}
    endpoint=$(echo "$endpoint" | sed "s/{ {{ param }}}/${{ param }}/g")
    {% endfor %}
    {% else %}
    # Add non-existent path segment
    local endpoint="{{ endpoint.path }}/non_existent"
    {% endif %}
    
    response=$(make_request "{{ endpoint.method }}" "$endpoint")
    
    # Should return 404 Not Found
    check_status_code "$response" "404"
    
    teardown_test
}
{% endif %}

{% endfor %}

@test "Test Summary" {
    print_test_summary
}
